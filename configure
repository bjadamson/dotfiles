#!/usr/bin/env python2.7
import os, errno, shutil, sys
from setup import install, work, vim

def symlink_dotfile_to_target(prefix, homedir, dotfile, target):
    def os_symlink(target, destination):
        cmd = 'ln -s {0} {1}'.format(target, destination)
        print "executing cmd:{0}".format(cmd)
        os.system(cmd)
    def force_symlink(target, destination):
        try:
            os_symlink(target, destination)
        except OSError, e:
            if e.errno == errno.EEXIST:
                try:
                    os.remove(destination)
                    os_symlink(target, destination)
                except OSError, e:
                    if e.errno == errno.EISDIR:
                        shutil.rmtree(destination)
                        os_symlink(target, destination)

    dst = homedir + dotfile
    if os.path.islink(dst):
        val = os.unlink(dst)
    val = force_symlink(prefix + target, dst)
    print "val '" + str(val) + "'"

def create_directories(prefix, homedir):
    # Ensure '.config' directory exists in user directory.
    os.system('mkdir -p ~/.config')

    # This is a bit out of place, but for a REASON.
    # This symlink points to a directory, and line after this installs bundle into
    # the ~/.vim/bundle directory. If we don't create this symlink first, then the command on the
    # next line ends up creating the directory, removing the possibility of overriding it with this
    # symlink.
    # TL;DR: Just leave the order and shit works. :)
    symlink_dotfile_to_target(prefix, homedir, 'nvim', '/nvim/')
    os.system('mkdir -p ~/.vim/bundle')

def install_everything():
    install.system_dependency('git')
    install.system_dependency('software-properties-common') # neovim

    zsh_command = 'sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"'
    os.system(zsh_command)

    os.system("sudo pip install thefuck")

def symlink_directories(prefix, homedir):
    def symlink_gitconfig(prefix, homedir):
        # Here we remove the .gitconfig file, so we can replace it with a symlink to this repo.
        fname = homedir + '/.gitconfig'
        os.system('rm -f %s' % fname)
        symlink_dotfile_to_target(prefix, homedir, '.gitconfig', '/git/gitconfig')

    # It's important to setup this symlink before we clone the vundles.
    symlink_dotfile_to_target(prefix, homedir, '.vim/', '/vim/')
    symlink_dotfile_to_target(prefix, homedir, '.vimrc', '/vim/vimrc')
    symlink_gitconfig(prefix, homedir)

    # Symlink the rest of the things.
    symlink_dotfile_to_target(prefix, homedir, '.config/amethyst', '/amethyst')
    symlink_dotfile_to_target(prefix, homedir, '.vim', '/vim/')
    symlink_dotfile_to_target(prefix, homedir, '.zshrc', '/zsh/zshrc')

def write_zsh_file(dotfiles_directory):
    with open(dotfiles_directory + '/zshrc', 'a') as f:
        line = "export ZSH_DOTFILES=$HOME/Downloads/dotfiles/zsh/"
        f.write(line + "\n")
        line = "export TERM=xterm"
        f.write(line + "\n")

def main(argv):
    """AFTER the symlink to the vim directory has been created, we can then only clone the vundle
    package.
    """
    """The only ordering that matters here is that the VIM symlink is created before we clone the vundle package.
    """
    prefix = sys.path[0]
    homedir = os.path.expanduser("~") + "/"
    os.environ['ZSH_DOTFILES'] = os.environ['HOME'] + '/Downloads/dotfiles/zsh/'
    dotfiles_directory = os.environ['ZSH_DOTFILES']

    create_directories(prefix, homedir)
    symlink_directories(prefix, homedir)

    write_zsh_file(dotfiles_directory)
    vim.clone_vundle(homedir)
    install_everything()

    print "Done"

main(sys.argv)
